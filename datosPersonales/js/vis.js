// Generated by CoffeeScript 1.8.0
(function() {
  var BubbleChart, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BubbleChart = (function() {
    function BubbleChart(data) {
      this.hide_details = __bind(this.hide_details, this);
      this.show_details = __bind(this.show_details, this);
      this.hide_years = __bind(this.hide_years, this);
      this.display_years = __bind(this.display_years, this);
      this.display_categories = __bind(this.display_categories, this);
      this.move_towards_year = __bind(this.move_towards_year, this);
      this.move_towards_category = __bind(this.move_towards_category, this);
      this.display_by_year = __bind(this.display_by_year, this);
      this.display_by_category = __bind(this.display_by_category, this);
      this.move_towards_center = __bind(this.move_towards_center, this);
      this.display_group_all = __bind(this.display_group_all, this);
      this.get_radius = __bind(this.get_radius, this);
      this.start = __bind(this.start, this);
      this.create_vis = __bind(this.create_vis, this);
      this.create_nodes = __bind(this.create_nodes, this);
      var max_amount;
      this.data = data;
      this.width = 940;
      this.height = 600;
      this.tooltip = CustomTooltip("gates_tooltip", 240);
      this.center = {
        x: this.width / 2,
        y: this.height / 2
      };
      this.year_centers = {
        "Enero": {
          x: (this.width / 4),
          y: this.height / 2
        },
        "Febrero": {
          x: ((this.width / 4) *2)-80,
          y: this.height / 2
        },
        "Marzo": {
          x: ((this.width / 4) *2)+80,
          y: this.height / 2
        },
        "Abril": {
          x: (this.width / 4)*3,
          y: this.height / 2
        }
      };
      this.category_centers = {
        "Correr": {
          x: (this.width / 5)+80,
          y: this.height / 2
        },
        "Caminar": {
          x: ((this.width / 5) *2)-20,
          y: this.height / 2
        },
        "Abdominales": {
          x: ((this.width / 5) *2)+80,
          y: this.height / 2
        },
        "Eliptico": {
          x: ((this.width / 5)*3)+30,
          y: this.height / 2
        },
        "Piernas": {
          x: ((this.width / 5)*3)+140,
          y: this.height / 2
        }
      };
      this.layout_gravity = -0.01;
      this.damper = 0.1;
      this.vis = null;
      this.nodes = [];
      this.force = null;
      this.circles = null;
      this.fill_color = d3.scale.ordinal().domain(["Correr", "Eliptico", "Caminar", "Abdominales", "Piernas"]).range(["#ff8c66", "#b3ff66", "#66d9ff", "#b366ff", "#ff66ff"]);
      max_amount = 160;

      this.radius_scale = d3.scale.sqrt().domain([2, 160]).range([0, 210]); 
      this.create_nodes();
      this.create_vis();
    }

    BubbleChart.prototype.create_nodes = function() {
      // The largest node for each cluster.
      var clusters = new Array(4);
      var i = 0;


      while(i < 4){
        clusters[i++]=Math.random() * 900;
      }

      
      this.data.forEach((function(_this) {
        return function(d) {
          var node;
          node = {
            id: d.id,
            radius: _this.radius_scale(parseInt(_this.get_radius(d.duration))),
            value: d.duration,
            group: d.group,
            year: d.year,
            day: d.day,
            km: d.km,
            month: d.month,
            cluster: d.cluster,
            x: clusters[(d.cluster)-1],
            y: clusters[(d.cluster)-1]
          };
          return _this.nodes.push(node);
        };
      })(this));
      return this.nodes;
      // return this.nodes.sort(function(a, b) {
      //   return b.cluster - a.cluster;
      // });
    };

    BubbleChart.prototype.get_radius = function(duration) {
      return Math.sqrt(duration);
    }

    BubbleChart.prototype.create_vis = function() {
      var that;
      this.vis = d3.select("#vis").append("svg").attr("width", this.width).attr("height", this.height).attr("id", "svg_vis");
      this.circles = this.vis.selectAll("circle").data(this.nodes, function(d) {
        return d.id;
      });
      that = this;
      this.circles.enter().append("circle").attr("r", 0).attr("fill", (function(_this) {
        return function(d) {
          return _this.fill_color(d.group);
        };
      })(this)).attr("stroke-width", 2).attr("stroke", (function(_this) {
        return function(d) {
          return d3.rgb(_this.fill_color(d.group)).darker();
        };
      })(this)).attr("id", function(d) {
        return "bubble_" + d.id;
      }).on("mouseover", function(d, i) {
        return that.show_details(d, i, this);
      }).on("mouseout", function(d, i) {
        return that.hide_details(d, i, this);
      });
      return this.circles.transition().duration(2000).attr("r", function(d) {
        return d.radius;
      });
    };

    BubbleChart.prototype.charge = function(d) {
      return -Math.pow(d.radius, 2.0) / 8;
    };

    BubbleChart.prototype.start = function() {
      return this.force = d3.layout.force().nodes(this.nodes).size([this.width, this.height]);
    };

    BubbleChart.prototype.display_group_all = function() {
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_center(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      return this.hide_years();
    };

    BubbleChart.prototype.move_towards_center = function(alpha) {
      return (function(_this) {
        return function(d) {
          d.x = d.x + (_this.center.x - d.x) * (_this.damper + 0.02) * alpha;
          return d.y = d.y + (_this.center.y - d.y) * (_this.damper + 0.02) * alpha;
        };
      })(this);
    };

    BubbleChart.prototype.display_by_year = function() {
      this.hide_years();
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_year(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      return this.display_years();
    };

    BubbleChart.prototype.display_by_category = function() {
      this.hide_years();
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_category(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      return this.display_categories();
    };

    BubbleChart.prototype.move_towards_year = function(alpha) {
      return (function(_this) {
        return function(d) {
          var target;
          target = _this.year_centers[d.month];
          d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
          return d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
        };
      })(this);
    };

    BubbleChart.prototype.move_towards_category = function(alpha) {
      return (function(_this) {
        return function(d) {
          var target;
          target = _this.category_centers[d.group];
          d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
          return d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
        };
      })(this);
    };

    BubbleChart.prototype.display_years = function() {
      var years, years_data, years_x;
      years_x = {
        "Enero": (this.width / 4)-80,
        "Febrero": ((this.width / 4) *2)-120,
        "Marzo": ((this.width / 4) *2)+80,
        "Abril": ((this.width / 4)*3) + 60
      };
      years_data = d3.keys(years_x);
      years = this.vis.selectAll(".years").data(years_data);
      return years.enter().append("text").attr("class", "years").attr("x", (function(_this) {
        return function(d) {
          return years_x[d];
        };
      })(this)).attr("y", 40).attr("text-anchor", "middle").text(function(d) {
        return d;
      });
    };

    BubbleChart.prototype.display_categories = function() {
      var years, years_data, years_x;
      years_x = {
        "Correr": (this.width / 5)-80,
        "Caminar": ((this.width / 5) *2)-50,
        "Abdominales": ((this.width / 5) *3),
        "Eliptico": ((this.width / 5)*4)-60,
        "Piernas": ((this.width / 5)*4) +70
      };
      years_data = d3.keys(years_x);
      years = this.vis.selectAll(".categories").data(years_data);
      return years.enter().append("text").attr("class", "years").attr("x", (function(_this) {
        return function(d) {
          return years_x[d];
        };
      })(this)).attr("y", 40).attr("text-anchor", "middle").text(function(d) {
        return d;
      });
    };

    BubbleChart.prototype.hide_years = function() {
      var years;
      var categories;
      years = (this.vis.selectAll(".years").remove());
      categories = this.vis.selectAll(".categories").remove();
      return years || categories;
    };

    BubbleChart.prototype.show_details = function(data, i, element) {
      var content;
      d3.select(element).attr("stroke", "black");
      content = "<span class=\"name\">Actividad:</span><span class=\"value\"> " + data.group + "</span><br/>";
      content += "<span class=\"name\">Duraci√≥n:</span><span class=\"value\"> " + (addCommas(data.value)) + " min</span><br/>";
      content += "<span class=\"name\">Distancia:</span><span class=\"value\"> " + data.km + " km</span><br>";
      content += "<span class=\"name\">Mes:</span><span class=\"value\"> " + data.month + "</span><br>";
      content += "<span class=\"name\">D√≠a:</span><span class=\"value\"> " + data.day + "</span>";
      return this.tooltip.showTooltip(content, d3.event);
    };

    BubbleChart.prototype.hide_details = function(data, i, element) {
      d3.select(element).attr("stroke", (function(_this) {
        return function(d) {
          return d3.rgb(_this.fill_color(d.group)).darker();
        };
      })(this));
      return this.tooltip.hideTooltip();
    };

    return BubbleChart;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $(function() {
    var chart, render_vis;
    chart = null;
    render_vis = function(csv) {
      chart = new BubbleChart(csv);
      chart.start();
      return root.display_all();
    };
    root.display_all = (function(_this) {
      return function() {
        return chart.display_group_all();
      };
    })(this);
    root.display_year = (function(_this) {
      return function() {
        return chart.display_by_year();
      };
    })(this);
    root.display_category = (function(_this) {
      return function() {
        return chart.display_by_category();
      };
    })(this);
    root.toggle_view = (function(_this) {
      return function(view_type) {
        if (view_type === 'year') {
          return root.display_year();
        } else  if (view_type === 'all'){
          return root.display_all();
        } else if (view_type === 'category'){
          return root.display_category();
        }
      };
    })(this);
    return d3.csv("data/activity.csv", render_vis);
  });

}).call(this);
